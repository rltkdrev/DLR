<!DOCTYPE html>
<html lang="ko">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>예약하기 - 동화고등학교</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="/css/style.css" rel="stylesheet">
    <style>
        .period-box {
            display: inline-block;
            width: 100px;
            height: 100px;
            margin: 5px;
            border: 1px solid #ccc;
            border-radius: 5px;
            text-align: center;
            line-height: 100px;
            cursor: pointer;
            transition: background-color 0.2s;
        }
        .period-box.available {
            background-color: #90EE90; /* light green */
        }
        .period-box.unavailable {
            background-color: #CCCCCC; /* gray */
            cursor: not-allowed;
        }
        .period-box.selected {
            background-color: #32CD32; /* green */
        }
        .loading {
            display: inline-block;
            width: 15px;
            height: 15px;
            border: 2px solid #f3f3f3;
            border-radius: 50%;
            border-top: 2px solid #3498db;
            animation: spin 1s linear infinite;
            margin-right: 5px;
        }
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        @media (max-width: 768px) {
            .period-box {
                width: 80px;
                height: 80px;
                line-height: 80px;
                font-size: 0.9em;
            }
        }
    </style>
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
            <a class="navbar-brand" href="/">동화고등학교</a>
            <div class="navbar-nav ms-auto">
                <span class="nav-item nav-link text-light"><%= user.displayName %></span>
                <a class="nav-item nav-link" href="/logout">로그아웃</a>
            </div>
        </div>
    </nav>

    <div class="container mt-4">
        <a href="/calendar" class="btn btn-secondary mb-3">캘린더로 돌아가기</a>
        <h2>예약하기</h2>
        <div class="alert alert-info">선택된 날짜: <span id="displayDate"><%= selectedDate %></span></div>
        <div id="loadingIndicator" class="alert alert-secondary" style="display: none;">
            <span class="loading"></span> 예약 정보를 불러오는 중...
        </div>
        <form id="reservationForm">
            <input type="hidden" id="selectedDate" name="date" value="<%= selectedDate %>">
            <div class="mb-3">
                <label class="form-label">직업</label>
                <select class="form-select" name="role" required>
                    <option value="teacher">교사</option>
                    <option value="student">학생</option>
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label">이름</label>
                <input type="text" class="form-control" name="name" required>
            </div>
            <div class="mb-3">
                <label class="form-label">소속</label>
                <input type="text" class="form-control" name="department" required>
            </div>
            <div class="mb-3">
                <label class="form-label">과학실</label>
                <select class="form-select" name="lab" id="labSelect" required>
                    <option value="1">과학실 1</option>
                    <option value="2">과학실 2</option>
                </select>
            </div>
            <div class="mb-3">
                <label class="form-label">교시</label>
                <div id="periodBoxes">
                    <div class="period-box available" data-period="1">1교시</div>
                    <div class="period-box available" data-period="2">2교시</div>
                    <div class="period-box available" data-period="3">3교시</div>
                    <div class="period-box available" data-period="4">4교시</div>
                    <div class="period-box available" data-period="5">5교시</div>
                    <div class="period-box available" data-period="6">6교시</div>
                    <div class="period-box available" data-period="7">7교시</div>
                    <div class="period-box available" data-period="8">방과후</div>
                </div>
                <input type="hidden" name="period" id="selectedPeriod" required>
            </div>
            <button type="submit" class="btn btn-primary">예약하기</button>
        </form>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            let allEvents = [];
            let eventsCache = {};
            
            // 날짜 표시
            const selectedDate = '<%= selectedDate %>';
            document.getElementById('selectedDate').value = selectedDate;
            document.getElementById('displayDate').textContent = selectedDate;
            
            const loadingIndicator = document.getElementById('loadingIndicator');

            function updatePeriodBoxes(dateStr) {
                // 캐시에 있는 경우 캐시 사용
                if (eventsCache[dateStr]) {
                    renderPeriods(eventsCache[dateStr]);
                    return;
                }
                
                loadingIndicator.style.display = 'block';
                
                fetch('/reservations')
                    .then(res => res.json())
                    .then(events => {
                        loadingIndicator.style.display = 'none';
                        
                        // 모든 이벤트 캐싱
                        allEvents = events;
                        
                        // 날짜별로 이벤트 캐싱
                        events.forEach(ev => {
                            const date = new Date(ev.start).toISOString().slice(0,10);
                            if (!eventsCache[date]) {
                                eventsCache[date] = [];
                            }
                            eventsCache[date].push(ev);
                        });
                        
                        renderPeriods(eventsCache[dateStr] || []);
                    })
                    .catch(error => {
                        loadingIndicator.style.display = 'none';
                        console.error('Error fetching events:', error);
                        alert('예약 정보를 불러오는데 실패했습니다. 페이지를 새로고침 해주세요.');
                    });
            }
            
            function renderPeriods(events) {
                // 과학실 기준으로 필터링
                const selectedLab = document.getElementById('labSelect').value;
                const filteredEvents = events.filter(ev => ev.extendedProps.lab === selectedLab);
                
                const reservedPeriods = filteredEvents.map(ev => parseInt(ev.extendedProps.period));
                
                const periodBoxes = document.querySelectorAll('.period-box');
                periodBoxes.forEach(box => {
                    const period = parseInt(box.dataset.period);
                    if (reservedPeriods.includes(period)) {
                        box.classList.remove('available');
                        box.classList.remove('selected');
                        box.classList.add('unavailable');
                    } else {
                        box.classList.remove('unavailable');
                        box.classList.add('available');
                    }
                });
            }

            // 초기 교시 상태 업데이트
            updatePeriodBoxes(selectedDate);
            
            // 과학실 변경 시 교시 상태 업데이트
            document.getElementById('labSelect').addEventListener('change', function() {
                document.querySelectorAll('.period-box').forEach(b => b.classList.remove('selected'));
                document.getElementById('selectedPeriod').value = '';
                updatePeriodBoxes(document.getElementById('selectedDate').value);
            });

            // 교시 선택 이벤트
            const periodBoxes = document.querySelectorAll('.period-box');
            periodBoxes.forEach(box => {
                box.addEventListener('click', function() {
                    if (this.classList.contains('available')) {
                        periodBoxes.forEach(b => b.classList.remove('selected'));
                        this.classList.add('selected');
                        document.getElementById('selectedPeriod').value = this.dataset.period;
                    } else {
                        alert('이미 예약된 시간입니다.');
                    }
                });
            });

            // 폼 제출 이벤트
            const reservationForm = document.getElementById('reservationForm');
            reservationForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                
                // 교시 선택 확인
                const selectedPeriod = document.getElementById('selectedPeriod').value;
                if (!selectedPeriod) {
                    alert('교시를 선택해주세요.');
                    return;
                }
                
                // 로딩 표시 추가
                const submitButton = this.querySelector('button[type="submit"]');
                const originalText = submitButton.textContent;
                submitButton.disabled = true;
                submitButton.innerHTML = '<span class="loading"></span> 예약 중...';
                
                // 폼 데이터 수집 및 전송
                const formData = new FormData(this);
                const data = Object.fromEntries(formData.entries());
                
                try {
                    const response = await fetch('/reservations', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(data)
                    });
                    
                    if (response.ok) {
                        alert('예약이 완료되었습니다.');
                        window.location.href = '/calendar';
                    } else {
                        const errorData = await response.json();
                        alert(errorData.error || '예약에 실패했습니다.');
                    }
                } catch (error) {
                    console.error('Error:', error);
                    alert('예약 중 오류가 발생했습니다. 네트워크 연결을 확인해주세요.');
                } finally {
                    // 버튼 상태 복원
                    submitButton.disabled = false;
                    submitButton.textContent = originalText;
                }
            });
        });
    </script>
</body>
</html> 